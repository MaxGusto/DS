{"cells":[{"cell_type":"markdown","id":"27636408","metadata":{"heading_collapsed":true,"id":"27636408"},"source":["# Импорт и установка зависимостей"]},{"cell_type":"code","execution_count":1,"id":"b06e37e6","metadata":{"hidden":true,"id":"b06e37e6","executionInfo":{"status":"ok","timestamp":1694546113098,"user_tz":-180,"elapsed":3668,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["import tensorflow as tf\n","#!pip install imageio\n","#!pip install git+https://github.com/tensorflow/docs\n","\n","import glob\n","import imageio\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import PIL\n","from tensorflow.keras import layers\n","import time\n","\n","from IPython import display"]},{"cell_type":"markdown","id":"f0d50491","metadata":{"heading_collapsed":true,"id":"f0d50491"},"source":["# Загрузка данных и подготовка"]},{"cell_type":"code","execution_count":2,"id":"981b6fa3","metadata":{"hidden":true,"id":"981b6fa3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694546117614,"user_tz":-180,"elapsed":1542,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}},"outputId":"41663249-f026-4425-9443-a02ae88c5de2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n"]}],"source":["(train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data() # загружаем данные"]},{"cell_type":"code","execution_count":3,"id":"ab035393","metadata":{"hidden":true,"id":"ab035393","executionInfo":{"status":"ok","timestamp":1694546121785,"user_tz":-180,"elapsed":1166,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')\n","train_images = (train_images - 255) / 255  # Нормализуем изображения"]},{"cell_type":"code","execution_count":4,"id":"f7aab57d","metadata":{"hidden":true,"id":"f7aab57d","executionInfo":{"status":"ok","timestamp":1694546124565,"user_tz":-180,"elapsed":670,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["BUFFER_SIZE = 60000\n","BATCH_SIZE = 256\n","\n","train_dataset = tf.data.Dataset\\\n",".from_tensor_slices(train_images)\\\n",".shuffle(BUFFER_SIZE)\\\n",".batch(BATCH_SIZE) # формируем батчи данных"]},{"cell_type":"markdown","id":"6488b916","metadata":{"heading_collapsed":true,"id":"6488b916"},"source":["# Построение модели"]},{"cell_type":"code","execution_count":5,"id":"27f03648","metadata":{"hidden":true,"id":"27f03648","executionInfo":{"status":"ok","timestamp":1694546127233,"user_tz":-180,"elapsed":1,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["# формируем архитектуру модели генератора, который будет пытаться воссоздать изображение\n","def make_generator_model():\n","    model = tf.keras.Sequential()\n","    model.add(layers.Dense(7*7*256, use_bias=False, input_shape=(100,))) # подается шум на вход\n","    model.add(layers.BatchNormalization())\n","    model.add(layers.LeakyReLU())\n","    model.add(layers.Reshape((7, 7, 256))) # изменяем размерность\n","\n","    model.add(layers.Conv2DTranspose(filters=128,\n","                                     kernel_size=(5, 5),\n","                                     strides=(1, 1),\n","                                     padding='same',\n","                                     use_bias=False)) # делаем upsampling\n","    model.add(layers.BatchNormalization())\n","    model.add(layers.LeakyReLU())\n","\n","    model.add(layers.Conv2DTranspose(filters=64,\n","                                     kernel_size=(5, 5),\n","                                     strides=(2, 2),\n","                                     padding='same',\n","                                     use_bias=False)) # делаем upsampling\n","    model.add(layers.BatchNormalization())\n","    model.add(layers.LeakyReLU())\n","\n","    model.add(layers.Conv2DTranspose(filters=1,\n","                                     kernel_size=(5, 5),\n","                                     strides=(2, 2),\n","                                     padding='same',\n","                                     use_bias=False,\n","                                     activation='tanh')) # делаем upsampling\n","\n","    return model"]},{"cell_type":"code","execution_count":6,"id":"a13fc848","metadata":{"hidden":true,"id":"a13fc848","outputId":"35ee1489-0154-4c3f-94f8-9cc364e03094","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1694546133798,"user_tz":-180,"elapsed":1251,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f1178b03ac0>"]},"metadata":{},"execution_count":6},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["generator = make_generator_model() # инициализируем генератор\n","noise = tf.random.normal([1, 100]) #  шум\n","generated_image = generator(noise)  # картинка, генерируемая необученным генератором\n","\n","plt.imshow(generated_image[0, :, :, 0], cmap='gray')"]},{"cell_type":"code","execution_count":7,"id":"3ac936e3","metadata":{"hidden":true,"id":"3ac936e3","executionInfo":{"status":"ok","timestamp":1694546137196,"user_tz":-180,"elapsed":248,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["# Определяем архитектуру дискриминатора, который будет распознавать оригинальное изображение или нет\n","def make_discriminator_model():\n","    model = tf.keras.Sequential()\n","    model.add(layers.Conv2D(filters=64,\n","                            kernel_size=(5, 5),\n","                            strides=(2, 2),\n","                            padding='same',\n","                            input_shape=[28, 28, 1]))\n","    model.add(layers.LeakyReLU())\n","    model.add(layers.Dropout(0.3))\n","\n","    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n","    model.add(layers.LeakyReLU())\n","    model.add(layers.Dropout(0.3))\n","\n","    model.add(layers.Flatten())\n","    model.add(layers.Dense(1))\n","\n","    return model"]},{"cell_type":"code","execution_count":8,"id":"4d0dea57","metadata":{"hidden":true,"id":"4d0dea57","outputId":"1ff1555f-8352-45a9-8bf0-3f2d7d72fc24","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1694546139516,"user_tz":-180,"elapsed":239,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor([[0.00246946]], shape=(1, 1), dtype=float32)\n"]}],"source":["discriminator = make_discriminator_model() # определяем дискриминатор\n","decision = discriminator(generated_image) # предсказание еще не тренированным дискриминатором\n","print(decision)"]},{"cell_type":"code","execution_count":9,"id":"8c05311d","metadata":{"hidden":true,"id":"8c05311d","executionInfo":{"status":"ok","timestamp":1694546140712,"user_tz":-180,"elapsed":2,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["loss = tf.keras.losses.BinaryCrossentropy(from_logits=True)\n","\n","# определим функции потерь генератора и дискриминатора\n","def discriminator_loss(real_output, fake_output):\n","    real_loss = loss(tf.ones_like(real_output), real_output) # потери для реальных изображений\n","    fake_loss = loss(tf.zeros_like(fake_output), fake_output)# потери для фейковых изображений\n","    total_loss = real_loss + fake_loss # суммарные потери\n","    return total_loss\n","\n","def generator_loss(fake_output):\n","    return loss(tf.ones_like(fake_output), fake_output) # насколько сгенирируемое похоже на реальное\n","\n","generator_optimizer = tf.keras.optimizers.Adam(1e-4)\n","discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)"]},{"cell_type":"code","execution_count":10,"id":"5af98e75","metadata":{"hidden":true,"id":"5af98e75","executionInfo":{"status":"ok","timestamp":1694546142862,"user_tz":-180,"elapsed":2,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["checkpoint_dir = './training_checkpoints'\n","checkpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\") # путь для сохранения промежуточных результатов\n","checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n","                                 discriminator_optimizer=discriminator_optimizer,\n","                                 generator=generator,\n","                                 discriminator=discriminator) # сохранение промежуточных моделей"]},{"cell_type":"code","execution_count":11,"id":"f8d5c879","metadata":{"hidden":true,"id":"f8d5c879","executionInfo":{"status":"ok","timestamp":1694546144497,"user_tz":-180,"elapsed":2,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["# Тренировка модели\n","\n","EPOCHS = 50\n","noise_dim = 100\n","num_examples_to_generate = 16\n","\n","seed = tf.random.normal([num_examples_to_generate, noise_dim]) # генерация шума на вход генератору"]},{"cell_type":"code","execution_count":12,"id":"ef5e56e4","metadata":{"hidden":true,"id":"ef5e56e4","executionInfo":{"status":"ok","timestamp":1694546146442,"user_tz":-180,"elapsed":238,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["@tf.function\n","def train_step(images): # определим шаг обучения\n","    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n","\n","    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n","        generated_images = generator(noise, training=True)\n","\n","        real_output = discriminator(images, training=True)\n","        fake_output = discriminator(generated_images, training=True)\n","\n","        gen_loss = generator_loss(fake_output)\n","        disc_loss = discriminator_loss(real_output, fake_output)\n","\n","    gradients_of_generator = gen_tape.gradient(gen_loss,\n","                                               generator.trainable_variables)\n","    gradients_of_discriminator = disc_tape.gradient(disc_loss,\n","                                                    discriminator.trainable_variables)\n","\n","    generator_optimizer.apply_gradients(zip(gradients_of_generator,\n","                                            generator.trainable_variables))\n","    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator,\n","                                                discriminator.trainable_variables))"]},{"cell_type":"code","execution_count":13,"id":"30f9c5c6","metadata":{"hidden":true,"id":"30f9c5c6","executionInfo":{"status":"ok","timestamp":1694546148595,"user_tz":-180,"elapsed":645,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["def train(dataset, epochs):\n","    for epoch in range(epochs):\n","        start = time.time()\n","\n","        for image_batch in dataset:\n","            train_step(image_batch)\n","\n","    # Produce images for the GIF as you go\n","    display.clear_output(wait=True)\n","    generate_and_save_images(generator,\n","                             epoch + 1,\n","                             seed)\n","\n","    # Save the model every 15 epochs\n","    if (epoch + 1) % 15 == 0:\n","        checkpoint.save(file_prefix = checkpoint_prefix)\n","\n","    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))\n","\n","    # Generate after the final epoch\n","    display.clear_output(wait=True)\n","    generate_and_save_images(generator, epochs, seed)"]},{"cell_type":"code","execution_count":14,"id":"9883019e","metadata":{"hidden":true,"id":"9883019e","executionInfo":{"status":"ok","timestamp":1694546150839,"user_tz":-180,"elapsed":258,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["def generate_and_save_images(model, epoch, test_input):\n","\n","    predictions = model(test_input, training=False) # не тренируем слои\n","\n","    fig = plt.figure(figsize=(4, 4))\n","    for i in range(predictions.shape[0]):\n","        plt.subplot(4, 4, i+1)\n","        plt.imshow(predictions[i, :, :, 0] * 255 + 255, cmap='gray')\n","        plt.axis('off')\n","\n","    plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"id":"87b82558","metadata":{"hidden":true,"id":"87b82558"},"outputs":[],"source":["train(train_dataset, EPOCHS)"]},{"cell_type":"code","execution_count":null,"id":"d70f101c","metadata":{"hidden":true,"id":"d70f101c","executionInfo":{"status":"aborted","timestamp":1694546316126,"user_tz":-180,"elapsed":3,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["def display_image(epoch_no):\n","    return PIL.Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))"]},{"cell_type":"code","execution_count":null,"id":"9fa3d09d","metadata":{"hidden":true,"id":"9fa3d09d","executionInfo":{"status":"aborted","timestamp":1694546316126,"user_tz":-180,"elapsed":3,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["anim_file = 'dcgan.gif'\n","\n","with imageio.get_writer(anim_file, mode='I') as writer:\n","    filenames = glob.glob('image*.png')\n","    filenames = sorted(filenames)\n","    for filename in filenames:\n","        image = imageio.imread(filename)\n","        writer.append_data(image)\n","    image = imageio.imread(filename)\n","    writer.append_data(image)"]},{"cell_type":"code","execution_count":null,"id":"f7f6356d","metadata":{"hidden":true,"id":"f7f6356d","executionInfo":{"status":"aborted","timestamp":1694546316126,"user_tz":-180,"elapsed":2,"user":{"displayName":"Максим Густомясов","userId":"13875018182189485230"}}},"outputs":[],"source":["import tensorflow_docs.vis.embed as embed\n","embed.embed_file(anim_file)"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.4"},"colab":{"provenance":[{"file_id":"1BYbYEcnOXOEQ0_4bgVMM_XI3QYjF0U-z","timestamp":1694546025019}]}},"nbformat":4,"nbformat_minor":5}