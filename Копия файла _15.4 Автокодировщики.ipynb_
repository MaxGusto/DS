{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2d60eb76",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras import utils\n",
    "#from google.colab import files\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.preprocessing import image\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import tensorflow.keras as keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "541def25",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"creditcard.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "de249166",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
       "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
       "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
       "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
       "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
       "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
       "\n",
       "        V26       V27       V28  Amount  Class  \n",
       "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
       "1  0.125895 -0.008983  0.014724    2.69      0  \n",
       "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
       "3 -0.221929  0.062723  0.061458  123.50      0  \n",
       "4  0.502292  0.219422  0.215153   69.99      0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0d7ead38",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = df.drop(['Time'], axis=1) # Удаляем столбец со временем\n",
    "\n",
    "data['Amount'] = StandardScaler().fit_transform(\n",
    "    data['Amount'].values.reshape(-1, 1)) # Нормализуем столбец с суммой транзакции\n",
    "\n",
    "frauds = data[data.Class == 1]\n",
    "normal = data[data.Class == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cb7e1e3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "RANDOM_SEED = 42\n",
    "X_train, X_test = train_test_split(normal, test_size=0.2, random_state=RANDOM_SEED)\n",
    "\n",
    "X_train = X_train.drop(['Class'], axis=1)\n",
    "X_test = pd.concat([X_test, frauds]) # Добавляем все мошеннические транзакции в тестовый набор данных\n",
    "\n",
    "y_test = X_test['Class'] # Делаем метки для тестового набора данных\n",
    "X_test = X_test.drop(['Class'], axis=1) # Удаляем класс у тестового набора данных\n",
    "\n",
    "X_train = X_train.values # Преобразуем данные в массивы numpy\n",
    "X_test = X_test.values # Преобразуем данные в массивы numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "25dac4a7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "7108/7108 [==============================] - 6s 689us/step - loss: 0.8679\n",
      "Epoch 2/20\n",
      "7108/7108 [==============================] - 6s 806us/step - loss: 0.6699\n",
      "Epoch 3/20\n",
      "7108/7108 [==============================] - 5s 685us/step - loss: 0.6584 0s - loss: 0.658\n",
      "Epoch 4/20\n",
      "7108/7108 [==============================] - 5s 658us/step - loss: 0.6797\n",
      "Epoch 5/20\n",
      "7108/7108 [==============================] - 5s 675us/step - loss: 0.6574\n",
      "Epoch 6/20\n",
      "7108/7108 [==============================] - 5s 679us/step - loss: 0.6625\n",
      "Epoch 7/20\n",
      "7108/7108 [==============================] - 5s 649us/step - loss: 0.6557\n",
      "Epoch 8/20\n",
      "7108/7108 [==============================] - 5s 667us/step - loss: 0.6517\n",
      "Epoch 9/20\n",
      "7108/7108 [==============================] - 5s 691us/step - loss: 0.6610 0s \n",
      "Epoch 10/20\n",
      "7108/7108 [==============================] - 5s 739us/step - loss: 0.6530\n",
      "Epoch 11/20\n",
      "7108/7108 [==============================] - 6s 850us/step - loss: 0.6571\n",
      "Epoch 12/20\n",
      "7108/7108 [==============================] - 6s 779us/step - loss: 0.6556\n",
      "Epoch 13/20\n",
      "7108/7108 [==============================] - 5s 768us/step - loss: 0.6617\n",
      "Epoch 14/20\n",
      "7108/7108 [==============================] - 5s 750us/step - loss: 0.6679\n",
      "Epoch 15/20\n",
      "7108/7108 [==============================] - 6s 825us/step - loss: 0.6685\n",
      "Epoch 16/20\n",
      "7108/7108 [==============================] - 5s 734us/step - loss: 0.6707\n",
      "Epoch 17/20\n",
      "7108/7108 [==============================] - 5s 755us/step - loss: 0.6665\n",
      "Epoch 18/20\n",
      "7108/7108 [==============================] - 6s 777us/step - loss: 0.6615\n",
      "Epoch 19/20\n",
      "7108/7108 [==============================] - 5s 760us/step - loss: 0.6515\n",
      "Epoch 20/20\n",
      "7108/7108 [==============================] - 5s 717us/step - loss: 0.6559\n"
     ]
    }
   ],
   "source": [
    "def creditcard_autoencoder():\n",
    "\n",
    "    input_ = Input(shape=(X_train.shape[1], )) # входной слой\n",
    "    x = Dense(10, activation='relu')(input_)\n",
    "    x = Dense(X_train.shape[1], activation='relu')(x) # выходной слой\n",
    "\n",
    "    autoencoder = Model(inputs=input_, outputs=x)\n",
    "    autoencoder.compile(optimizer='Adam', loss='mse')\n",
    "    return autoencoder\n",
    "\n",
    "model = creditcard_autoencoder()\n",
    "history = model.fit(X_train, X_train, epochs=20, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d53d689d",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(X_test) # делаем предсказания"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "dc1c8d59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Минимальная ошибка нормальных трансакций: 0.0451\n",
      "Максимальная ошибка нормальных трансакций: 1291.6608\n",
      "Средняя ошибка нормальных трансакций: 0.6686\n",
      "Минимальная ошибка мошеннических трансакций: 0.1052\n",
      "Максимальная ошибка мошеннических трансакций: 272.4461\n",
      "Средняя ошибка мошеннических трансакций: 25.6185\n"
     ]
    }
   ],
   "source": [
    "mse = np.mean(np.power(X_test - predictions, 2), axis=1) # MSE автокодировщика\n",
    "\n",
    "mse_normal = mse[y_test.values == 0] # ошибка в нормальных транзакциях\n",
    "mse_frauds = mse[y_test.values == 1] # ошибка в мошеннических транзакциях\n",
    "\n",
    "print(\"Минимальная ошибка нормальных трансакций:\", round(min(mse_normal),4))\n",
    "print(\"Максимальная ошибка нормальных трансакций:\", round(max(mse_normal),4))\n",
    "print(\"Средняя ошибка нормальных трансакций:\", round(sum(mse_normal) / len(mse_normal),4))\n",
    "\n",
    "print(\"Минимальная ошибка мошеннических трансакций:\", round(min(mse_frauds),4))\n",
    "print(\"Максимальная ошибка мошеннических трансакций:\", round(max(mse_frauds),4))\n",
    "print(\"Средняя ошибка мошеннических трансакций:\", round(sum(mse_frauds) / len(mse_frauds),4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6544b827",
   "metadata": {},
   "outputs": [],
   "source": [
    "def getAccByBias(bias):\n",
    "    isNormal = mse_normal < bias\n",
    "    isFrauds = mse_frauds > bias\n",
    "\n",
    "    accNormal = sum(isNormal) / len(isNormal)\n",
    "    accFaruds = sum(isFrauds) / len(isFrauds)\n",
    "\n",
    "    print(\"Распознано нормальных трансакций: \", round(100*accNormal), \"%\", sep=\"\")\n",
    "    print(\"Распознано мошеннических трансакций: \", round(100*accFaruds), \"%\", sep=\"\")\n",
    "    print(\"Средняя accuracy распознавания: \", round(50*(accNormal + accFaruds)), \"%\", sep=\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c88822ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Распознано нормальных трансакций: 97%\n",
      "Распознано мошеннических трансакций: 83%\n",
      "Средняя accuracy распознавания: 90%\n"
     ]
    }
   ],
   "source": [
    "getAccByBias(2.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "212640c8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
